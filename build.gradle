
// For those who want the bleeding edge
plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.+'
    id 'org.quiltmc.quilt-mappings-on-loom' version '4.+'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

repositories {
    // for parchment
    maven { url = "https://maven.parchmentmc.org" }
    // for fapi
    maven { url = "https://maven.fabricmc.net/" }
    // for REI
    maven { url = "https://maven.shedaniel.me/" }
    // for modmenu
    maven { url = "https://maven.terraformersmc.com/" }
    // for config
    maven { url = "https://cursemaven.com" }
}

group= "mcjty.theoneprobe" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "theoneprobe"

if (System.getenv('BUILD_NUMBER') != null) {
    version += "-${System.getenv('BUILD_NUMBER')}"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")

    // names of mojmap with the docs and params of parchment, then docs and params of QM as fallback
    mappings loom.layered {
        it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:1.18.1-rc3+build.4:v2")) // https://maven.quiltmc.org/#browse/browse:release
        it.parchment("org.parchmentmc.data:parchment-1.18.1:BLEEDING-20211212.174449-1@zip") // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data/parchment-1.18.1/BLEEDING-SNAPSHOT
        it.officialMojangMappings {
            setNameSyntheticMembers(false)
        }
    }

    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    modImplementation(include("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_version}"))
    implementation(include('com.electronwill.night-config:core:3.6.0'))
    implementation(include('com.electronwill.night-config:toml:3.6.0'))

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    include modApi('teamreborn:energy:2.2.0') {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

loom {
    accessWidenerPath = file("src/main/resources/theoneprobe.accesswidener")
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

//processResources
//{
//    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version
//
//    // replace stuff in mcmod.info, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'mcmod.info'
//                
//        // replace version and mcversion
//        expand 'version':project.version, 'mcversion':project.minecraft.version
//    }
//        
//    // copy everything else, thats not the mcmod.info
//    from(sourceSets.main.resources.srcDirs) {
//        exclude 'mcmod.info'
//    }
//}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'

    it.options.release = 17
}

java {
    withSourcesJar()
}

task apiJar(type: Jar) {
    classifier = "api"
    from(sourceSets.main.output) {
        include "mcjty/theoneprobe/api/**"
    }
}

artifacts {
    archives apiJar
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        from components.java
        artifact apiJar

        artifactId = project.archivesBaseName
        pom {
            name = 'RFToolsBase'
            description = 'Base mod for all McJty tech mods'
            scm {
                url = 'https://github.com/McJtyMods/RFToolsBase'
                connection = 'scm:git:git@github.com:McJtyMods/RFToolsBase.git'
                developerConnection = 'scm:git:git@github.com:McJtyMods/RFToolsBase.git'
            }
            issueManagement {
                system = 'github'
                url = 'https://github.com/McJtyMods/RFToolsBase/issues'
            }
            licenses {
                license {
                    name = 'MIT'
                    distribution = 'repo'
                }
            }
            developers {
                developer {
                    id = 'McJty'
                    name = 'McJty'
                    roles = ['developer']
                }
            }
        }
    }
    repositories {
        if (System.getenv('local_maven') != null) {
            maven {
                name = 'local'
                url = 'file://' + System.getenv('local_maven')
            }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.enabled = project.hasProperty('curseforge_key')

curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion project.minecraft_version
        mainArtifact(jar) {
            displayName = "${modname} - ${version}"
        }
        relations {
            optionalLibrary 'baubles'
            optionalLibrary 'tesla'
            optionalLibrary 'redstone-flux'
        }
    }
}

